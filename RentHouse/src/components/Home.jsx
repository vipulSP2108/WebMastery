/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 public/models/Jason.glb -o src/components/Home.jsx -k -K -r public 
*/

import { Html, useGLTF, CameraControls } from "@react-three/drei";
import { atom, useAtom } from "jotai";
import { degToRad } from "three/src/math/MathUtils";
import { currentPageAtom} from "./UI";
import { storepartAtom } from "./UI";
import React, { useRef, useEffect, Children, createContext } from "react";
import Experience from "./Experience";

export const MyContext = createContext();


const Display = ( {
  title,
  description,
  bgcolor,
  }) => {
  const [storepart, setstorepart] = useAtom(storepartAtom);
  const [currentPage, setCurrentPage] = useAtom(currentPageAtom);

  return (
    
    <Html 
    transform
    center
    className={`${currentPage === "store" ? "" : "opacity-0"} font-black overflow-hidden rounded-[1px] duration-1000`}
    > 
      <div className={`h-3 w-8 text-[2px] font-normal bg-white bg-opacity-50 p-[1px] text-black`}>{description}</div>
      <div className={`h-1.1 w-8 text-[2.5px] font-black ${bgcolor} hover:bg-opacity-50 cursor-pointer duration-500 p-[0.5px] text-white text-center`}>{title}</div>
    </Html>
  );
};

export const Home = ({html,children, ...props}) => {
  
  const computer_ref = useRef();
  const computer_table_ref = useRef();
  const photo_frame_ref = useRef();
  const bed_ref = useRef();
  const trolly_ref = useRef();

  // const controlsHome = useRef();

  const { nodes, materials } = useGLTF('/models/Jason.glb')
  const [storepart, setstorepart] = useAtom(storepartAtom);
  const [currentPage, setCurrentPage] = useAtom(currentPageAtom);

  const storecamera_fuction = async () => {
    if (currentPage === "store"){
      if (storepart === "computer_table"){
        console.log("Comptable");
        props.user.current.smoothTime = 0.4;
        props.user.current.fitToBox(computer_table_ref.current, true);
      }
      else if (storepart === "photo_frame"){
        props.user.current.smoothTime = 0.4;
        props.user.current.fitToBox(photo_frame_ref.current, true);
      }
      else if (storepart === "trolly"){
        props.user.current.smoothTime = 0.4;
        props.user.current.fitToBox(trolly_ref.current, true);
      }
      else if (storepart === "bed"){
        props.user.current.smoothTime = 0.4;
        props.user.current.fitToBox(bed_ref.current, true);
      }
      else if (storepart === "computer"){
        props.user.current.smoothTime = 0.4;
        props.user.current.fitToBox(computer_ref.current, true);
      }
    }
  };

  const storepartanimation = async () => {
    // controlsHome.current.dolly(-22);
    storecamera_fuction();    
  };

  useEffect( () => {
    storepartanimation();
  }, [storepart]);

  const aayush = "hi";

  return (
  <>
  
    <MyContext.Provider value={aayush}>
      {children}
    </MyContext.Provider>

    <group {...props} dispose={null}>
      
      {/* <Experience user = {trolly_ref} /> */}
      {/* <CameraControls ref={controlsHome}/> */}
      
      <group>
        <group name="Node">
          

          <group position-x={0.95} position-y={1.0} position-z={-1.3}>
            { html && (
            <Display
            title = "Tech Hub Haven"
            description = "Modern desk for your computer, providing a clean and organized workspace."
            bgcolor = "bg-blue-600"
            />)}
          </group>
          <group position-x={0.95} position-y={0.2} position-z={-0.65} rotation-x={-degToRad(50)}>
            { html && (
            <Display
            title = "Digital Dynamo"
            description = "High-powered Workstation for efficient work and immersive entertainment."
            bgcolor = "bg-orange-600"
            />)}
          </group>
          <group position-x={-1.25} position-y={0.09} position-z={0} rotation-y={degToRad(35)} rotation-x={-degToRad(30)} rotation-z={degToRad(19)}>
            { html && (
            <Display
            title = "Slumber Sanctuary"
            description = "Cozy bed with soft bedding, creating a perfect retreat for relaxation."
            bgcolor = "bg-violet-700"
            />)}
          </group>

          <group position-x={-1.25} position-y={-0.5} position-z={1.75} rotation-y={degToRad(135)} rotation-x={degToRad(60)} rotation-z={-degToRad(50)}>
            { html && (
            <Display
            title = "Clutter Commander"
            description = "Versatile storage trolley, keeping your space tidy and organized."
            bgcolor = "bg-red-600"
            />)}
          </group>
          <group position-x={-1.30} position-y={1.7} position-z={-1.3}>
            { html && (
            <Display
            title = "Memory Frame"
            description = "Elegant frame showcasing a special moment, adding a personal touch."
            bgcolor = "bg-yellow-400"
            />)}
          </group>

          {/* ref={computer} */}

          <mesh ref={bed_ref} position-x={-1.25} position-y={0.3} position-z={-0.1}>
            <boxGeometry
              args={[1.2, 1.10, 2]}
            
            />
            <meshBasicMaterial transparent opacity={0.2}/>
          </mesh>

          <mesh ref={photo_frame_ref} position-x={-1.25} position-y={1.3} position-z={-1.1}>
            <boxGeometry
              args={[1.2, 1.2, 0.5]}
            
            />
            <meshBasicMaterial transparent opacity={0.2}/>
          </mesh>

          <mesh ref={trolly_ref} position-x={-1} position-y={0} position-z={1.7}>
            <boxGeometry
              args={[1,1,1]}
            
            />
            <meshBasicMaterial transparent opacity={0.2}/>
          </mesh>

          <mesh ref={computer_table_ref} position-x={0.9} position-y={0.3} position-z={-0.7}>
            <boxGeometry
              args={[1.5, 1.7, 1]}
            
            />
            <meshBasicMaterial transparent opacity={0.2}/>
          </mesh>

          <mesh ref={computer_ref} position-x={0.9} position-y={0.3} position-z={-0.7}>
            <boxGeometry
              args={[1.5, 1.7, 1]}
            
            />
            <meshBasicMaterial transparent opacity={0.2}/>
          </mesh>
          
          <mesh name="Node-Mesh" geometry={nodes['Node-Mesh'].geometry} material={materials.mat21} />
          <mesh name="Node-Mesh_1" geometry={nodes['Node-Mesh_1'].geometry} material={materials.mat22} />
          <mesh name="Node-Mesh_2" geometry={nodes['Node-Mesh_2'].geometry} material={materials.mat16} />
          <mesh name="Node-Mesh_3" geometry={nodes['Node-Mesh_3'].geometry} material={materials.mat18} />
          <mesh name="Node-Mesh_4" geometry={nodes['Node-Mesh_4'].geometry} material={materials.mat15} />
          <mesh name="Node-Mesh_5" geometry={nodes['Node-Mesh_5'].geometry} material={materials.mat17} />
          <mesh name="Node-Mesh_6" geometry={nodes['Node-Mesh_6'].geometry} material={materials.mat19} />
          <mesh name="Node-Mesh_7" geometry={nodes['Node-Mesh_7'].geometry} material={materials.mat20} />
          <mesh name="Node-Mesh_8" geometry={nodes['Node-Mesh_8'].geometry} material={materials.mat3} />
          <mesh name="Node-Mesh_9" geometry={nodes['Node-Mesh_9'].geometry} material={materials.mat23} />
          <mesh name="Node-Mesh_10" geometry={nodes['Node-Mesh_10'].geometry} material={materials.mat24} />
          <mesh name="Node-Mesh_11" geometry={nodes['Node-Mesh_11'].geometry} material={materials.mat8} />
          <mesh name="Node-Mesh_12" geometry={nodes['Node-Mesh_12'].geometry} material={materials.mat12} />
          <mesh name="Node-Mesh_13" geometry={nodes['Node-Mesh_13'].geometry} material={materials.mat25} />
          <mesh name="Node-Mesh_14" geometry={nodes['Node-Mesh_14'].geometry} material={materials.mat9} />
          <mesh name="Node-Mesh_15" geometry={nodes['Node-Mesh_15'].geometry} material={materials.mat14} />
          <mesh name="Node-Mesh_16" geometry={nodes['Node-Mesh_16'].geometry} material={materials.mat7} />
          <mesh name="Node-Mesh_17" geometry={nodes['Node-Mesh_17'].geometry} material={materials.mat5} />
        </group>
      </group>

      {/* <MyContext.Provider value={computer_ref}>
      computer_table_ref, trolly_ref, photo_frame_ref, bed_ref
      </MyContext.Provider> */}
      {/* <MyContext.Provider value={variable}></MyContext.Provider> */}
      
    </group>
    <MyContext.Provider value={aayush}>
      {children}
    </MyContext.Provider>
  </>
  );
};

useGLTF.preload('/models/Jason.glb')



